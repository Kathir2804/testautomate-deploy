# name: 📦🚀 Build & deploy iOS app for an environment

# on:
#   push:
#     tags:
        # - 'v*'
#   pull_request:
#     types:
#       - closed
#     branches: [main]

#   workflow_dispatch:
#     inputs:
#       workflow-id:
#         description: 'Select the workflow to run'
#         required: true
#         default: 'devtest'

# jobs:
#   deployIos:
#     name: 🍏 Build & deploy iOS release
#     runs-on: macos-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: 🔐 Install Apple certificate and provisioning profile
#         env:
#           P12_DISTRIBUTION_CERTIFICATE_BASE64: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}"
#           P12_DISTRIBUTION_CERTIFICATE_PASSWORD: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}"
#           DISTRIBUTION_PROVISIONING_PROFILE_BASE64: "${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}"
#           KEYCHAIN_PASSWORD: "${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}"
#           EXPORT_OPTIONS_BASE64: "${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}"
#         run: |
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#           EXPORT_OPTIONS_PATH="${{ github.workspace }}/app/ios/Runner/ExportOptions.plist"

#           echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
#           echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#       - name: 📝 Edit pubspec version
#         run: |
#           sed -Ei "" "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/" app/pubspec.yaml
#       - name: ⚙️ Setup Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: "3.13.0"
#           channel: 'stable'
#           cache: true
#         id: flutter
#       - name: ⚙️ Setup Melos
#         uses: bluefireteam/melos-action@v2
#       - name: ⚙️ Install dependencies for all packages
#         run: melos build:pub_get:all
#       - name: 🍏📦 Create iOS ${{ inputs.short-environment-name }} appbundle release
#         run: |
#           pushd app/
#           flutter build ipa \
#             --release \
#             --flavor ${{ inputs.flavor }} \
#             --target lib/main_${{ inputs.flavor }}.dart \
#             --export-options-plist=ios/Runner/ExportOptions.plist
#           popd
#       - name: 🍏🚀 Deploy to App Store (Testflight)
#         uses: apple-actions/upload-testflight-build@v1
#         with:
#           app-path: ${{ github.workspace }}/app/build/ios/ipa/flutter_ci_cd_demo.ipa
#           issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
#           api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
#           api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}

# cd.yml
name: CD

on:
  push:
    branch: [test-dev]
      
jobs:
 deploy:
   runs-on: macos-latest
   steps:
     - uses: actions/checkout@v2
 
     - name: Set up ruby env
       uses: ruby/setup-ruby@v1.138.0
       with:
         ruby-version: 3.2.1
         bundler-cache: true
 
      - name: Decode signing certificate into a file
        env:
         CERTIFICATE_BASE64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
        run: |
         echo $CERTIFICATE_BASE64 | base64 --decode > signing-cert.p12
    
     - name: Build & upload iOS binary
       run: bundle exec fastlane ios build_upload_testflight
       env:
         ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
         ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
         ASC_KEY: ${{ secrets.ASC_PRIVATE_KEY }}
         SIGNING_KEY_PASSWORD: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
         SIGNING_KEY_FILE_PATH: signing-cert.p12
 
     - name: Upload app-store ipa and dsyms to artifacts
       uses: actions/upload-artifact@v2
       with:
         name: app-store ipa & dsyms
         path: |
           ${{ github.workspace }}/example-iOS.ipa
           ${{ github.workspace }}/*.app.dSYM.zip