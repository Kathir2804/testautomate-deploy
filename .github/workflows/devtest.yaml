name: DemoApp PlayStore Release

on:
  push:
    branches:
      - test-dev
    tags:
      - 'v*'
  pull_request:
    types:
      - closed
    branches: [main]

  workflow_dispatch:
    inputs:
      workflow-id:
        description: 'Select the workflow to run'
        required: true
        default: 'devtest'

jobs:  
  version:
    name: Create version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Fetch all history for all tags and branches
        run: |
          git config remote.origin.url https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --depth=10000
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Create version.txt with nuGetVersion
        run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
      - name: Upload version.txt
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: version.txt
      - name: Get version from pubspec.yaml
        id: version-from-pubspec
        run: |
          version=$(grep -oP 'version:\s*\K[\d.]+(\+\d+)?' pubspec.yaml)
          echo "Version from pubspec.yaml is $version"
          echo "::set-output name=pubspec_version::$version"
     
  build:
    name: Build APK and Create release
    needs: [version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set Tag
        run: |
          tag="${{ env.GITHUB_REF }}/v${{ steps.version-from-pubspec.outputs.pubspec_version }}"
          echo "Tag to set: $tag"
          git tag -a $tag -m "Tagging release with version ${{ steps.version-from-pubspec.outputs.pubspec_version }}"
          git push origin $tag
      - name: Set Environment Variable
        run: echo "VERSION_INCREMENT=major" >> $GITHUB_ENV 
      - uses: actions/checkout@v1
      - name: Get version.txt
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - name: Create new file without newline char from version.txt
        run: tr -d '\n' < version.txt > version1.txt
      - name: Authenticate with Google Cloud
        env:
          GCP_APPLICATION_CREDENTIALS: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$GCP_APPLICATION_CREDENTIALS" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json --project=cez-app
      - name: Download Keystore
        run: gsutil cp gs://cez-mob-gitactions/upload-keystore.jks android/app/upload-keystore.jks
      - name: Download google-services.json
        run: gsutil cp gs://cez-mob-gitactions/google-services.json android/app/google-services.json
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt
            
      - name: Determine Version Increment
        id: determine-version-increment
        run: |
            echo "::set-output name=increment::$VERSION_INCREMENT"
            echo "Version increment is $GITHUB_ENV "
        env:
            VERSION_INCREMENT: ${{ env.VERSION_INCREMENT }}
      - name: Debug Output
        run: echo "Increment value is ${{ steps.determine-version-increment.outputs.increment }}"
      # - name: Update Version Based on Increment
      #   run: |
      #     if [[ ${{ steps.determine-version-increment.outputs.increment }} == 'major' ]]; then
      #       perl -i -pe 's/^(version:\s+)(\d+)(\.\d+\.\d+\+)(\d+)$/$1.($2+1).0.0+($4+1)/e' pubspec.yaml
      #     elif [[ ${{ steps.determine-version-increment.outputs.increment }} == 'minor' ]]; then
      #       perl -i -pe 's/^(version:\s+\d+\.)\d+(\.\d+\+\d+)$/$1.($2+1).$3/e' pubspec.yaml
      #     elif [[ ${{ steps.determine-version-increment.outputs.increment }} == 'patch' ]]; then
      #       perl -i -pe 's/^(version:\s+\d+\.\d+\.)(\d+)(\+)(\d+)$/$1.($2+1).$3.($4+1)/e' pubspec.yaml
      #     else
      #       perl -i -pe 's/^(version:\s+\d+\.\d+\.\d+\+)(\d+)$/$1.($2+1)/e' pubspec.yaml
      #     fi
      - name: Update version in YAML
        run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml
        # run: perl -i -pe 's/^(version:\s+\d+\.\d+\.)(\d+)(\+)(\d+)$/$1.($2+1).$3.($4+1)/e' pubspec.yaml
      - name: Print version number
        run: echo "Version number is ${{ steps.version.outputs.content }}"
      - name: Print version number
        run: cat pubspec.yaml
      - name: Update KeyStore password in gradle properties
        run: sed -i 's/#{STORE_PASSWORD}#/${{ secrets.STORE_PASSWORD }}/g' android/key.properties
      - name: Update KeyStore key password in gradle properties
        run: sed -i 's/#{KEY_PASSWORD}#/${{ secrets.KEY_PASSWORD }}/g' android/key.properties
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.13.0'
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk
      - run: flutter build appbundle
      - name: Create a Release in GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/app-release.aab"
          token: ${{ secrets.TOKEN }}
          tag: ${{ steps.version.outputs.content }}
          commit: ${{ github.sha }}
      - name: Upload app bundle
        uses: actions/upload-artifact@v2
        with:
          name: appbundle
          path: build/app/outputs/bundle/release/app-release.aab
  release:
    name: Release app to internal track
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Get appbundle from artifacts
        uses: actions/download-artifact@v2
        with:
          name: appbundle

      - name: Check if build is for Android TV
        id: check-android-tv
        run: echo Check if the build is for Android TV ${{ steps.check-android-tv.outputs.check-android-tv }}

      - name: Release app to internal track for Android TV
        if: steps.check-android-tv.outputs.check-android-tv == 'true'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
          packageName: com.avow.cez_tower
          releaseFiles: app-release.aab
          track: internal
          # whatsNewDirectory: distribution/whatsnew
          # inAppUpdatePriority: 0
          status: completed
          # changesNotSentForReview: false
          # working-directory: ${{ github.workspace }}