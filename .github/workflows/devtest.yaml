name: DemoApp PlayStore Release

on:
  push:
    branches:
      - test-dev
  pull_request:
    types:
      - closed
    branches: [main]

  workflow_dispatch:
    inputs:
      workflow-id:
        description: 'Select the workflow to run'
        required: true
        default: 'devtest'

jobs:  
  # comment-trigger:
  #   name: Trigger Workflow on Comment
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check Comment Content
  #       id: check-comment
  #       run: echo "::set-output name=trigger::${{ contains(github.event.comment.body, 'deploy') }}"     
  version:
    name: Create version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Fetch all history for all tags and branches
        run: |
          git config remote.origin.url https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --depth=10000
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Create version.txt with nuGetVersion
        run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
      - name: Upload version.txt
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: version.txt
     
  build:
    name: Build APK and Create release
    # needs: [version, comment-trigger]
    needs: [version ]
    # if: ${{ needs.comment-trigger.outputs.trigger == 'true' }}
    runs-on: ubuntu-latest
    env:
      VERSION_INCREMENT: major 
    steps:
      - uses: actions/checkout@v1
      - name: Get version.txt
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - name: Create new file without newline char from version.txt
        run: tr -d '\n' < version.txt > version1.txt
      - name: Authenticate with Google Cloud
        env:
          GCP_APPLICATION_CREDENTIALS: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$GCP_APPLICATION_CREDENTIALS" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json --project=cez-app
      - name: Download Keystore
        run: gsutil cp gs://cez-mob-gitactions/upload-keystore.jks android/app/upload-keystore.jks
      - name: Download google-services.json
        run: gsutil cp gs://cez-mob-gitactions/google-services.json android/app/google-services.json
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt
      - name: Determine version increment
        id: determine-increment
        run: |
          if [[ "${{ env.VERSION_INCREMENT }}" == "major" ]]; then
            echo "INCREMENT=major" >> $GITHUB_ENV
          elif [[ "${{ env.VERSION_INCREMENT }}" == "minor" ]]; then
            echo "INCREMENT=minor" >> $GITHUB_ENV
          elif [[ "${{ env.VERSION_INCREMENT }}" == "build" ]]; then
            echo "INCREMENT=build" >> $GITHUB_ENV
          elif [[ "${{ env.VERSION_INCREMENT }}" == "patch" ]]; then
            echo "INCREMENT=patch" >> $GITHUB_ENV
          else
            echo "INCREMENT=minor" >> $GITHUB_ENV  # Default to minor if not specified
          fi
      - name: Update version in YAML
        run: |
          increment=$(/bin/cat ${{ steps.determine-increment.outputs.increment }})
          if [ "$increment" == "major" ]; then
            perl -i -pe 's/^(version:\s+\d+\.)\d+(\.\d+\+\d+)$/$1($2+1)/e' pubspec.yaml
          elif [ "$increment" == "minor" ]; then
            perl -i -pe 's/^(version:\s+\d+\.\d+\.)(\d+)(\+\d+)$/$1($2+1)$3/e' pubspec.yaml
          elif [ "$increment" == "build" ]; then
            perl -i -pe 's/^(version:\s+\d+\.\d+\.\d+\+)(\d+)$/$1($2+1)/e' pubspec.yaml
          elif [ "$increment" == "bugfix" ]; then
            perl -i -pe 's/^(version:\s+\d+\.\d+\.\d+\+\d+$)/$1+1/e' pubspec.yaml
          fi
      - name: Print version number
        run: cat pubspec.yaml
      # - name: Update version in YAML
      #   # run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml
      #   run: perl -i -pe 's/^(version:\s+\d+\.\d+\.)(\d+)(\+)(\d+)$/$1.($2+1).$3.($4+1)/e' pubspec.yaml
      # - name: Print version number
      #   run: echo "Version number is ${{ steps.version.outputs.content }}"
      - name: Print version number
        run: cat pubspec.yaml
      - name: Update KeyStore password in gradle properties
        run: sed -i 's/#{STORE_PASSWORD}#/${{ secrets.STORE_PASSWORD }}/g' android/key.properties
      - name: Update KeyStore key password in gradle properties
        run: sed -i 's/#{KEY_PASSWORD}#/${{ secrets.KEY_PASSWORD }}/g' android/key.properties
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.13.0'
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk
      - run: flutter build appbundle
      - name: Create a Release in GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/app-release.aab"
          token: ${{ secrets.TOKEN }}
          tag: ${{ steps.version.outputs.content }}
          commit: ${{ github.sha }}
      - name: Upload app bundle
        uses: actions/upload-artifact@v2
        with:
          name: appbundle
          path: build/app/outputs/bundle/release/app-release.aab
  release:
    name: Release app to internal track
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Get appbundle from artifacts
        uses: actions/download-artifact@v2
        with:
          name: appbundle

      - name: Check if build is for Android TV
        id: check-android-tv
        run: echo Check if the build is for Android TV ${{ steps.check-android-tv.outputs.check-android-tv }}

      - name: Release app to internal track for Android TV
        if: steps.check-android-tv.outputs.check-android-tv == 'true'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
          packageName: com.avow.cez_tower
          releaseFiles: app-release.aab
          track: internal
          # whatsNewDirectory: distribution/whatsnew
          # inAppUpdatePriority: 0
          status: completed
          # changesNotSentForReview: false
          # working-directory: ${{ github.workspace }}